#!/usr/bin/python
import argparse
import json
import requests
from proteus import SOAPClient
from time import sleep


def assign_device_ips(creds, deviceList):
    # Get down to business
    c = SOAPClient(creds['username'], creds['password'], action='MAKE_DHCP_RESERVED')
    for device in deviceList:
        # Get Network Object and set dhcp_offset based on CIDR
        netObj = c.getIP4Network(device['netaddr'])
        if int(netObj['properties']['CIDR'][-2:]) > 24:
            dhcp_offset = 0
        else:
            dhcp_offset = 30
        # Check to see if IP reservation already exists
        response = c.getEntityByName(netObj['id'], device['name'], 'IP4Address')
        if response['properties'] is not None:
            properties = c.propertiesStringToDict(response['properties'])
            ipObj = c.getIP4Address(properties['address'])
            print(json.dumps(ipObj, sort_keys=True, indent=4))
            device['ipaddr'] = properties['address']
        # If no existing reservation, time to make one
        else:
            # Get Next Available IP Address in Subnet
            ipAddr = c.getNextIP4Address(netObj, offset=dhcp_offset)
            if ipAddr is None:
                print("device raised fault: 'Network ' \
                      + '{net} is out of DHCP address space. No reservation for {host}'".format(
                      net=device['netaddr'], host=device['name']))
            # Address was found, Assign the address
            else:
                try:
                    ipObj = c.assignIP4Address(device['name'], ipAddr, macAddr=device['mac'], action=c.action)
                    # print(json.dumps(ipObj, sort_keys=True, indent=4))
                    print('{n},{m},{i}'.format(n=ipObj['name'],
                                               m=ipObj['properties']['macAddress'],
                                               i=ipObj['properties']['address']))
                    device['ipaddr'] = ipAddr
                except Exception as e:
                    print(str(e))
    c.logout()
    return deviceList


def register_dns(creds, deviceList):
    # Set the URL
    jobID = '54395c2c-a819-451e-b599-c9ae9a184481'
    url = 'https://rundeck.spectrum-health.org:4443/api/15/job/{}/run'.format(jobID)
    apiKey = creds['rundeckapikey']
    params = {
        'format': 'json',
        'authtoken': apiKey
    }
    for device in deviceList:
        try:
            dnsrecord = gethostbyname(device['name'])
        except:
            dnsrecord = None
        if dnsrecord is not None:
            if device['ipaddr'] == dnsrecord:
                print('DNS Entries already exist - {d}'.format(d=device['name']))
                continue
            else:
                exit("DNS is FUCKED - {d}".format(d=device['name']))
        else:
            # Loop through list, creating DNS record for every host
            body = {
                "argString": "-IPAddress {} -RecordToAdd {}".format(device['ipaddr'], device['name'])
            }
            response = requests.post(url, json=body, params=params)
            print(device['name'], response.status_code, response.text)
            sleep(2)


parser = argparse.ArgumentParser()
parser.add_argument('filename', help='filename')
parser.add_argument('-c', '--creds', help='path to file containing credentials')
parser.add_argument('-d', '--dns', help='register devices in DNS if flag is set')
args = parser.parse_args()

with open(args.creds) as f:
    creds = json.load(f)

with open(args.filename, 'r') as f:
    # f.readline()  # ignore column headers
    # build two-dimensional array from csv values
    # reservations = [line.strip().split(',') for line in f.readlines()]
    deviceList = [
        {
            'name': device[0],
            'mac': device[1],
            'netaddr': device[2]
        }
        for device in [line.strip().split(',') for line in f.readlines()]
        if device[0] not in ['name', 'hostname']
    ]

deviceList = assign_device_ips(creds, deviceList)
if args.dns:
    register_dns(creds, deviceList)
